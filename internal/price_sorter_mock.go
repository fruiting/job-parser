// Code generated by MockGen. DO NOT EDIT.
// Source: price_sorter.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPriceSorter is a mock of PriceSorter interface.
type MockPriceSorter struct {
	ctrl     *gomock.Controller
	recorder *MockPriceSorterMockRecorder
}

// MockPriceSorterMockRecorder is the mock recorder for MockPriceSorter.
type MockPriceSorterMockRecorder struct {
	mock *MockPriceSorter
}

// NewMockPriceSorter creates a new mock instance.
func NewMockPriceSorter(ctrl *gomock.Controller) *MockPriceSorter {
	mock := &MockPriceSorter{ctrl: ctrl}
	mock.recorder = &MockPriceSorterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceSorter) EXPECT() *MockPriceSorterMockRecorder {
	return m.recorder
}

// PricesFromJobs mocks base method.
func (m *MockPriceSorter) PricesFromJobs(jobs []*Job) (Salary, Salary, Salary) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PricesFromJobs", jobs)
	ret0, _ := ret[0].(Salary)
	ret1, _ := ret[1].(Salary)
	ret2, _ := ret[2].(Salary)
	return ret0, ret1, ret2
}

// PricesFromJobs indicates an expected call of PricesFromJobs.
func (mr *MockPriceSorterMockRecorder) PricesFromJobs(jobs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PricesFromJobs", reflect.TypeOf((*MockPriceSorter)(nil).PricesFromJobs), jobs)
}
