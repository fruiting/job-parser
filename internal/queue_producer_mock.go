// Code generated by MockGen. DO NOT EDIT.
// Source: queue_producer.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParseByPositionTaskProducer is a mock of ParseByPositionTaskProducer interface.
type MockParseByPositionTaskProducer struct {
	ctrl     *gomock.Controller
	recorder *MockParseByPositionTaskProducerMockRecorder
}

// MockParseByPositionTaskProducerMockRecorder is the mock recorder for MockParseByPositionTaskProducer.
type MockParseByPositionTaskProducerMockRecorder struct {
	mock *MockParseByPositionTaskProducer
}

// NewMockParseByPositionTaskProducer creates a new mock instance.
func NewMockParseByPositionTaskProducer(ctrl *gomock.Controller) *MockParseByPositionTaskProducer {
	mock := &MockParseByPositionTaskProducer{ctrl: ctrl}
	mock.recorder = &MockParseByPositionTaskProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParseByPositionTaskProducer) EXPECT() *MockParseByPositionTaskProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockParseByPositionTaskProducer) Produce(payload *ParseByPositionTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockParseByPositionTaskProducerMockRecorder) Produce(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockParseByPositionTaskProducer)(nil).Produce), payload)
}
