// Code generated by MockGen. DO NOT EDIT.
// Source: queue_consumer.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	redismq "github.com/adjust/redismq"
	gomock "github.com/golang/mock/gomock"
)

// MockRedisPool is a mock of RedisPool interface.
type MockRedisPool struct {
	ctrl     *gomock.Controller
	recorder *MockRedisPoolMockRecorder
}

// MockRedisPoolMockRecorder is the mock recorder for MockRedisPool.
type MockRedisPoolMockRecorder struct {
	mock *MockRedisPool
}

// NewMockRedisPool creates a new mock instance.
func NewMockRedisPool(ctrl *gomock.Controller) *MockRedisPool {
	mock := &MockRedisPool{ctrl: ctrl}
	mock.recorder = &MockRedisPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisPool) EXPECT() *MockRedisPoolMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockRedisPool) Put(payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockRedisPoolMockRecorder) Put(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRedisPool)(nil).Put), payload)
}

// MockRedisConsumer is a mock of RedisConsumer interface.
type MockRedisConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockRedisConsumerMockRecorder
}

// MockRedisConsumerMockRecorder is the mock recorder for MockRedisConsumer.
type MockRedisConsumerMockRecorder struct {
	mock *MockRedisConsumer
}

// NewMockRedisConsumer creates a new mock instance.
func NewMockRedisConsumer(ctrl *gomock.Controller) *MockRedisConsumer {
	mock := &MockRedisConsumer{ctrl: ctrl}
	mock.recorder = &MockRedisConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisConsumer) EXPECT() *MockRedisConsumerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRedisConsumer) Get() (*redismq.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*redismq.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisConsumerMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisConsumer)(nil).Get))
}

// GetUnacked mocks base method.
func (m *MockRedisConsumer) GetUnacked() (*redismq.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnacked")
	ret0, _ := ret[0].(*redismq.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnacked indicates an expected call of GetUnacked.
func (mr *MockRedisConsumerMockRecorder) GetUnacked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnacked", reflect.TypeOf((*MockRedisConsumer)(nil).GetUnacked))
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockConsumer) Consume(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Consume", ctx)
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerMockRecorder) Consume(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), ctx)
}
